/*
-Time Complexity : O(log n)
-Auxiliary Space : O(1)
-Did this code successfully run on Leetcode :Yes
-Any problem you faced while coding this : No
-Your code here along with comments explaining your approach
 1. Calculate the mid. After calculating mid, 
    if array is sorted and rotated then one side of the mid will always be sorted. 
 2. if array[mid] is greater than array[end] that means 1st half is sorted and minimum will lie in unsorted side i.e in the second half. so move the start pointer to mid+1
 3. else minimum will lie in the first half. so move the end pointer to mid
 4. return the element at index start
*/
class Solution {
    public int findMin(int[] nums) {
        int len = nums.length;
        int start =0, end = len-1, mid=0 ;
        while(start<end){
            mid = (start+end)/2;
            //1st half is not sorted, minimum lies in second half
            if(nums[mid] > nums[end])
                start= mid+1;
             //minimum lies in second half
            else
                end = mid;
        }
        return nums[start];
    }
}
