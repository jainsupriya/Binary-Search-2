/*
-Time Complexity : O(log n)
-Auxiliary Space : O(1)
-Did this code successfully run on Leetcode :Yes
-Any problem you faced while coding this : No
-Your code here along with comments explaining your approach
 1. Find the index of first occurance of the target elment.
	1. calculate mid, if array[mid] is less than target that means target lies in 2nd half, we will move start pointer in this case.
	2. else we will move right pointer.
 2. If target element is not present in the array then in that case we dont need to find     the last occurance as that will also be -1 only so we can directly return -1,-1 from here, w/o calculating the second
 3. Then Find the index of of element greater than 1 of target. This will be the next index after target element's index
    so we can just substract -1 from this and return that index as last position of the target element.
    this will save wrting 2 methods for calculating first and last occurance. 
    we can just reuse the same logic.
*/
class Solution {
    public int[] searchRange(int[] nums, int target) {
        //edge case
        if(nums== null || nums.length==0)
            return new int[]{-1,-1};
        //Find the index of first occurance of the target elment.
        int start = searchRangeUtil(nums, target);
        //target element is not present. no need to calculate last position.
        if(nums[start] != target)
            return new int[]{-1,-1};
        //Find the index of element greater than 1 of target. This will be the next index after target element's index 
        //so we can just substract -1 from this and return that index as last position of the target element.
        int end = searchRangeUtil(nums, target+1);
        return new int[]{start,end-1};
    }
    //binary search to find target element
    public int searchRangeUtil(int[]nums, int target){
        int start=0, end = nums.length-1;
        int mid=0;
        while(start< end){
            mid= start+(end-start)/2;
            if(nums[mid] < target)
                start=mid+1;
            else
                end= mid;
        }
        return start;
    }
}


